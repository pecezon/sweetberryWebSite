{"ast":null,"code":"/*\nCopyright (c) NAVER Crop.\nname: @cfcs/core\nlicense: MIT\nauthor: NAVER Crop.\nrepository: https://github.com/naver/cfcs\nversion: 0.0.24\n*/\nimport Component from '@egjs/component';\n\n/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\n/**\n * @hidden\n */\nfunction keys(obj) {\n  return Object.keys(obj);\n}\n/**\n * @hidden\n */\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n * @hidden\n */\n\nfunction isString(val) {\n  return typeof val === \"string\";\n}\n/**\n * @hidden\n */\n\nfunction isObject(val) {\n  return typeof val === \"object\";\n}\n/**\n * @hidden\n */\n\nfunction isFunction(val) {\n  return typeof val === \"function\";\n}\n\n/**\n * @hidden\n */\n\nfunction findTarget(target) {\n  var el;\n  if (!target) {\n    return null;\n  }\n  if (isString(target)) {\n    el = document.querySelector(target);\n  } else if (target instanceof Element) {\n    el = target;\n  } else if (\"value\" in target || \"current\" in target) {\n    el = target.value || target.current;\n  }\n  return el;\n}\n/**\n * @description Sets the name of the class method to be exposed to the outside.\n * @category DOM\n * @return Property Decorator\n * @example\n * ```ts\n * import { withClassMethods } from \"@cfcs/core\";\n *\n * class YourFrameworkComponent {\n *   @withClassMethod(METHOD_NAMES)\n *   inst = new YourComponent();\n * }\n * ```\n */\n\nfunction withClassMethods(methods) {\n  return function (prototype, memberName) {\n    methods.forEach(function (name) {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var result = (_a = this[memberName])[name].apply(_a, args); // fix `this` type to return your own `class` instance to the instance using the decorator.\n\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\nvar OBSERVERS_PATH = \"__observers__\";\nvar COMPUTED_PATH = \"__computed__\";\nvar CFCS_DETECTED_DEPENDENCIES_VERSION = 1;\nvar CFCS_DETECTED_DEPENDENCIES = \"__CFCS_DETECTED_DEPENDENCIES__\";\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction getDetectedStack() {\n  // Version issues do not occur when you access the native object in the global.\n  Object[CFCS_DETECTED_DEPENDENCIES] = Object[CFCS_DETECTED_DEPENDENCIES] || {};\n  var versionList = Object[CFCS_DETECTED_DEPENDENCIES];\n  versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] = versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] || [];\n  return versionList[CFCS_DETECTED_DEPENDENCIES_VERSION];\n}\nfunction getCurrentDetected() {\n  var stack = getDetectedStack();\n  return stack[stack.length - 1];\n}\nfunction detectDependencies(host) {\n  var stack = getDetectedStack();\n  var observers = [];\n  var detected = {\n    host: host,\n    observers: observers,\n    push: function (observer) {\n      if (host !== observer && observers.indexOf(observer) === -1) {\n        observers.push(observer);\n      }\n    }\n  };\n  stack.push(detected);\n  return detected;\n}\nfunction endDetectDependencies() {\n  var stack = getDetectedStack();\n  return stack.pop();\n}\n\n/**\n * Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @see observe\n */\n\nvar Observer = /*#__PURE__*/\nfunction () {\n  /**\n   *\n   */\n  function Observer(value) {\n    this._emitter = new Component();\n    this._current = value;\n  }\n  var __proto = Observer.prototype;\n  Object.defineProperty(__proto, \"current\", {\n    /**\n     * return the current value.\n     */\n    get: function () {\n      var currentDetected = getCurrentDetected();\n      currentDetected === null || currentDetected === void 0 ? void 0 : currentDetected.push(this);\n      return this._current;\n    },\n    set: function (value) {\n      this._setCurrent(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * When the current value changes, the callback function is called.\n   */\n\n  __proto.subscribe = function (callback) {\n    this.current;\n    this._emitter.on(\"update\", callback);\n    return this;\n  };\n  /**\n   * Cancel the registered subscription through callback.\n   */\n\n  __proto.unsubscribe = function (callback) {\n    this._emitter.off(\"update\", callback);\n    return this;\n  };\n  __proto._setCurrent = function (value) {\n    var prevValue = this._current;\n    var isUpdate = value !== prevValue;\n    this._current = value;\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value, prevValue);\n    }\n  };\n  /**\n   * @hidden\n   */\n\n  __proto.toString = function () {\n    return \"\".concat(this.current);\n  };\n  /**\n   * @hidden\n   */\n\n  __proto.valueOf = function () {\n    return this.current;\n  };\n  return Observer;\n}();\n\n/**\n * @category Reactive\n * @hidden\n */\n\nvar ComputedObserver = /*#__PURE__*/\nfunction (_super) {\n  __extends(ComputedObserver, _super);\n  /**\n   * @description Creates a new computed observer from the values of other observers.\n   * It is read-only and if you change the value of the observer used inside the callback, its value will be automatically updated.\n   * @param _computedCallback A function for observers to be computed.\n   */\n\n  function ComputedObserver(_computedCallback) {\n    var _this = _super.call(this) || this;\n    _this._computedCallback = _computedCallback;\n    _this._registered = [];\n    _this._onCheckUpdate = function () {\n      _this._setCurrent(_this.current);\n    };\n    _this._current = _this.current;\n    return _this;\n  }\n  var __proto = ComputedObserver.prototype;\n  Object.defineProperty(__proto, \"current\", {\n    get: function () {\n      var _this = this;\n      detectDependencies(this);\n      var value = this._computedCallback();\n      var results = endDetectDependencies();\n      this._registered.forEach(function (observer) {\n        observer.unsubscribe(_this._onCheckUpdate);\n      });\n      results.observers.forEach(function (observer) {\n        observer.subscribe(_this._onCheckUpdate);\n      });\n      this._registered = results.observers;\n      return value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ComputedObserver;\n}(Observer);\nfunction injectObserve(prototype, memberName, publicName) {\n  if (publicName === void 0) {\n    publicName = memberName;\n  }\n  var nextAttributes = {\n    configurable: true,\n    get: function () {\n      return getObserver(this, publicName).current;\n    },\n    set: function (value) {\n      getObserver(this, publicName, value).current = value;\n    }\n  };\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  if (publicName !== memberName) {\n    Object.defineProperty(prototype, publicName, {\n      configurable: true,\n      get: function () {\n        return getObserver(this, publicName).current;\n      }\n    });\n  }\n}\n/**\n * @description `Observe` is a property decorator and converts the property into a `reactive state`. You can detect its status through `.subscribe`.\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n* ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  // The public name and state name are the same.\n  @Observe value1 = 1;\n  // If you want to set public name and private properties separately\n  @Observe(\"value2\") _value2 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\ninterface C\n```\n */\n\nfunction Observe() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  if (args.length > 1) {\n    return injectObserve(args[0], args[1]);\n  }\n  return function (prototype, memberName) {\n    return injectObserve(prototype, memberName, args[0]);\n  };\n}\n/**\n * @hidden\n */\n\nfunction Reactive() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return Observe.apply(void 0, args);\n}\n\n/**\n * @hidden\n */\n\nfunction injectReactiveSubscribe(object) {\n  object[\"subscribe\"] = function (name, callback) {\n    this[name];\n    getObserver(this, name).subscribe(callback);\n  };\n  object[\"unsubscribe\"] = function (name, callback) {\n    var _this = this;\n    if (!name) {\n      keys(getObservers(this)).forEach(function (observerName) {\n        _this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n/**\n * @description `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive-Decorator\n * @see Observe\n * @example\n * ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  @Observe value1 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\n\ninterface Component extends ReactiveSubscribe<{\n  value1: number;\n  value2: number;\n}> {}\n\nconst component = new Component();\n\n// 1\nconsole.log(component.value1);\n\ncomponent.subscribe(\"value1\", nextValue => {\n  // When the change event occurs => (2, 2)\n  console.log(nextValue, component.value2);\n});\n```\n */\n\nfunction ReactiveSubscribe(Constructor) {\n  var prototype = Constructor.prototype;\n  injectReactiveSubscribe(prototype);\n}\nfunction makeReactiveObject(setup, all) {\n  var result = isFunction(setup) ? setup() : setup;\n  var reactiveObject = {};\n  defineObservers(reactiveObject);\n  keys(result).forEach(function (name) {\n    var value = result[name];\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n    } else {\n      setObserver(reactiveObject, name, observe(value));\n    }\n    Observe(name)(reactiveObject, name);\n  });\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject;\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Makes all values into reactive objects.\n * @example\n * ```ts\n * import { reactive } from \"@cfcs/core\";\n *\n * const obj = reactive({\n *  value1: 1,\n *  value2: 2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * obj.value1 = 2;\n * ```\n */\n\nfunction reactive(setup) {\n  return makeReactiveObject(setup);\n}\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Only the values to which observer is applied are objects to which reactive is applied.\n * @example\n * ```ts\n * import { partialReactive, observe } from \"@cfcs/core\";\n *\n * const value1 = observe(1);\n * const value2 = observe(2);\n * const obj = partialReactive({\n *  value1,\n *  value2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * value1.current = 2;\n * ```\n */\n\nfunction partialReactive(setup) {\n  return makeReactiveObject(setup);\n}\n/**\n * @description Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @example\n * ```ts\n * import { observe } from \"@cfcs/core\";\n *\n * const ob1 = observe(1);\n *\n * ob1.subscribe(nextValue => {\n *   console.log(nextValue);\n * });\n *\n * ob1.current = 2;\n * ```\n */\n\nfunction observe(defaultValue) {\n  return new Observer(defaultValue);\n}\n/**\n * @hidden\n */\n\nfunction computed(computedCallback) {\n  return new ComputedObserver(computedCallback);\n}\n\n/**\n * @hidden\n */\n\nfunction withReactiveMethods(ref, methods) {\n  var obj = {};\n  if (!methods) {\n    return obj;\n  }\n  methods.forEach(function (name) {\n    obj[name] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var current = ref.current || ref.value;\n      return current[name].apply(current, args);\n    };\n  });\n  return obj;\n}\n/**\n * @hidden\n */\n\nfunction defineObservers(instance) {\n  var observers = {};\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get: function () {\n      return observers;\n    }\n  });\n  return observers;\n}\n/**\n * @hidden\n */\n\nfunction getObservers(instance) {\n  var _a, _b;\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n  var observers = instance[OBSERVERS_PATH];\n  var computedList = (_b = (_a = instance === null || instance === void 0 ? void 0 : instance.constructor) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b[COMPUTED_PATH];\n  if (computedList) {\n    computedList.forEach(function (name) {\n      if (!(name in observers) && name in instance) {\n        instance[name];\n      }\n    });\n  }\n  return observers;\n}\n/**\n * @hidden\n */\n\nfunction getObserver(instance, name, defaultValue) {\n  var observers = getObservers(instance);\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n/**\n * @hidden\n */\n\nfunction setObserver(instance, name, observer) {\n  var observers = getObservers(instance);\n  observers[name] = observer;\n}\n/**\n * @description Whether that object is an observer instance\n * @category Reactive\n */\n\nfunction isObserver(val) {\n  return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n/**\n * @description Whether the object is reactive\n * @category Reactive\n */\n\nfunction isReactive(val) {\n  return val && !isObserver(val) && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n\n/**\n * @category Reactive\n * @hidden\n */\n\nfunction adaptReactive(adapter, props) {\n  var objectAdapter = isFunction(adapter) ? {\n    setup: adapter\n  } : adapter;\n  function getProps() {\n    var _a, _b, _c, _d, _e;\n    return (_e = (_c = (_a = props === null || props === void 0 ? void 0 : props()) !== null && _a !== void 0 ? _a : (_b = objectAdapter.props) === null || _b === void 0 ? void 0 : _b.call(objectAdapter)) !== null && _c !== void 0 ? _c : (_d = objectAdapter.data) === null || _d === void 0 ? void 0 : _d.call(objectAdapter)) !== null && _e !== void 0 ? _e : {};\n  }\n  var eventEmitter = new Component();\n  var mountedHooks = [];\n  var initHooks = [];\n  var destroyHooks = [];\n  var onHooks = [];\n  var instanceRef = {\n    current: null\n  };\n  var offHooksList = [];\n  var initialState = null;\n  var eventNames = [];\n  var methodNames = [];\n  var onMounted = function (callback) {\n    mountedHooks.push(callback);\n  };\n  var onInit = function (callback) {\n    initHooks.push(callback);\n  };\n  var onDestroy = function (callback) {\n    destroyHooks.push(callback);\n  };\n  var on = function (callback) {\n    onHooks.push(callback);\n  };\n  var emit = function (eventName) {\n    var params = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      params[_i - 1] = arguments[_i];\n    }\n    eventEmitter.trigger.apply(eventEmitter, __spreadArray([eventName], params, false));\n  };\n  var setInitialState = function (state) {\n    initialState = state;\n  };\n  var setEvents = function (events) {\n    eventNames = events;\n  };\n  var setMethods = function (methods) {\n    methodNames = methods;\n  };\n  if (objectAdapter.setup) {\n    instanceRef.current = objectAdapter.setup({\n      getProps: getProps,\n      setInitialState: setInitialState,\n      setEvents: setEvents,\n      setMethods: setMethods,\n      onMounted: onMounted,\n      onDestroy: onDestroy,\n      onInit: onInit,\n      emit: emit,\n      on: on\n    }) || null;\n  }\n  if (objectAdapter.created) {\n    instanceRef.current = objectAdapter.created(getProps()) || null;\n  }\n  if (objectAdapter.events) {\n    setEvents(objectAdapter.events);\n  }\n  if (objectAdapter.state) {\n    setInitialState(objectAdapter.state);\n  }\n  if (objectAdapter.methods) {\n    setMethods(objectAdapter.methods);\n  }\n  if (objectAdapter.mounted) {\n    onMounted(objectAdapter.mounted);\n  }\n  if (objectAdapter.destroy) {\n    destroyHooks.push(objectAdapter.destroy);\n  }\n  if (objectAdapter.init) {\n    initHooks.push(objectAdapter.init);\n  }\n  if (objectAdapter.on) {\n    onHooks.push(function (instance, eventName, listener) {\n      var off = objectAdapter.on(instance, eventName, listener);\n      return function () {\n        var _a;\n        off && off();\n        (_a = objectAdapter.off) === null || _a === void 0 ? void 0 : _a.call(objectAdapter, instance, eventName, listener);\n      };\n    });\n  }\n  return {\n    events: function () {\n      return eventNames;\n    },\n    state: function () {\n      var inst = instanceRef.current;\n      if (initialState) {\n        return initialState;\n      }\n      if (inst) {\n        var observers_1 = getObservers(inst);\n        setInitialState(keys(observers_1).reduce(function (prev, cur) {\n          prev[cur] = observers_1[cur].current;\n          return prev;\n        }, {}));\n      }\n      return initialState || {};\n    },\n    instance: function () {\n      return instanceRef.current;\n    },\n    mounted: function () {\n      var props = getProps();\n      mountedHooks.forEach(function (hook) {\n        instanceRef.current = hook(props, instanceRef.current) || instanceRef.current;\n      });\n    },\n    init: function () {\n      // on events\n      var instance = instanceRef.current;\n      var props = getProps();\n      offHooksList = eventNames.map(function (eventName) {\n        var listener = function () {\n          var _a;\n          var params = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n          }\n          (_a = eventEmitter).trigger.apply(_a, __spreadArray([eventName], params, false));\n        };\n        var instance = instanceRef.current;\n        return onHooks.map(function (hook) {\n          return hook(instance, eventName, listener);\n        }).filter(Boolean);\n      }); // init\n\n      initHooks.forEach(function (hook) {\n        hook(instance, props);\n      });\n    },\n    destroy: function () {\n      // off events\n      offHooksList.forEach(function (offHooks) {\n        offHooks.forEach(function (hook) {\n          hook();\n        });\n      }); // destroy\n\n      eventEmitter.off();\n      var instance = instanceRef.current;\n      var props = getProps();\n      destroyHooks.forEach(function (hook) {\n        hook(instance, props);\n      });\n    },\n    methods: function () {\n      return withReactiveMethods(instanceRef, methodNames);\n    },\n    on: function (eventName, listener) {\n      eventEmitter.on(eventName, listener);\n    },\n    off: function (eventName, listener) {\n      eventEmitter.off(eventName, listener);\n    }\n  };\n}\n\n/**\n * @description `Computed` is a property decorator.\n * Changes in computed state values are also recognized according to changes in observers used within the getter function.\n * You can detect its status through `.subscribe`.\n * @hidden\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n * ```ts\nconst ob1 = observe(0);\nconst ob2 = observe(1);\n\n// When\n@ReactiveSubscribe\nclass TestComputed {\n    @Computed\n    get ob3() {\n        return ob1.current + ob2.current;\n    }\n}\nconst inst = new TestComputed();\n\ninst.subscribe(\"ob3\", ob3 => {\n  console.log(ob3);\n});\n\nob1.current = 1;\n```\n */\n\nfunction Computed(prototype, memberName, attributes) {\n  var get = attributes.get;\n  function getComputed() {\n    var observers = getObservers(this);\n    if (!(memberName in observers)) {\n      observers[memberName] = computed(get.bind(this));\n    }\n    return getObserver(this, memberName).current;\n  }\n  var nextAttributes = {\n    configurable: true,\n    get: getComputed\n  };\n  if (COMPUTED_PATH in prototype) {\n    prototype[COMPUTED_PATH] || (prototype[COMPUTED_PATH] = []);\n    var computedList = prototype[COMPUTED_PATH];\n    if (computedList.indexOf(memberName) === -1) {\n      computedList.push(memberName);\n    }\n  }\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  return nextAttributes;\n}\nexport { Computed, ComputedObserver, Observe, Observer, Reactive, ReactiveSubscribe, adaptReactive, camelize, computed, defineObservers, findTarget, getObserver, getObservers, injectReactiveSubscribe, isFunction, isObject, isObserver, isReactive, isString, keys, observe, partialReactive, reactive, setObserver, withClassMethods, withReactiveMethods };","map":{"version":3,"names":["keys","obj","Object","camelize","str","replace","all","letter","toUpperCase","isString","val","isObject","isFunction","findTarget","target","el","document","querySelector","Element","value","current","withClassMethods","methods","prototype","memberName","forEach","name","args","_i","arguments","length","result","_a","apply","OBSERVERS_PATH","COMPUTED_PATH","CFCS_DETECTED_DEPENDENCIES_VERSION","CFCS_DETECTED_DEPENDENCIES","getDetectedStack","versionList","getCurrentDetected","stack","detectDependencies","host","observers","detected","push","observer","indexOf","endDetectDependencies","pop","Observer","_emitter","Component","_current","__proto","defineProperty","get","currentDetected","set","_setCurrent","subscribe","callback","on","unsubscribe","off","prevValue","isUpdate","trigger","toString","concat","valueOf","ComputedObserver","_super","__extends","_computedCallback","_this","call","_registered","_onCheckUpdate","results","injectObserve","publicName","nextAttributes","configurable","getObserver","Observe","Reactive","injectReactiveSubscribe","object","getObservers","observerName","ReactiveSubscribe","Constructor","makeReactiveObject","setup","reactiveObject","defineObservers","isObserver","setObserver","observe","reactive","partialReactive","defaultValue","computed","computedCallback","withReactiveMethods","ref","instance","computedList","_b","constructor","isReactive","adaptReactive","adapter","props","objectAdapter","getProps","_e","_c","_d","data","eventEmitter","mountedHooks","initHooks","destroyHooks","onHooks","instanceRef","offHooksList","initialState","eventNames","methodNames","onMounted","onInit","onDestroy","emit","eventName","params","__spreadArray","setInitialState","state","setEvents","events","setMethods","created","mounted","destroy","init","listener","inst","observers_1","reduce","prev","cur","hook","map","filter","Boolean","offHooks","Computed","attributes","getComputed","bind"],"sources":["/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/core/utils.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/dom/utils.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/const.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/detectDependencies.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/Observer.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/ComputedObserver.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/Observe.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/ReactiveSubscribe.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/inline.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/utils.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/adaptReactive.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/Computed.ts"],"sourcesContent":["/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\n\n/**\n * @hidden\n */\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\n/**\n * @hidden\n */\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\n/**\n * @hidden\n */\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\n/**\n * @hidden\n */\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\n\n/**\n * @hidden\n */\nexport function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}\n","import { isString, Ref } from \"../core\";\n\n/**\n * @hidden\n */\nexport function findTarget<Target extends Element = Element>(target: string | Target | Ref<Target> | null): Target | null {\n  let el!: Target;\n\n  if (!target) {\n    return null;\n  } if (isString(target)) {\n    el = document.querySelector<Target>(target)!;\n  } else if (target instanceof Element) {\n    el = target;\n  } else if (\"value\" in target || \"current\" in target) {\n    el = target.value! || target.current!;\n  }\n\n  return el;\n}\n\n/**\n * @description Sets the name of the class method to be exposed to the outside.\n * @category DOM\n * @return Property Decorator\n * @example\n * ```ts\n * import { withClassMethods } from \"@cfcs/core\";\n *\n * class YourFrameworkComponent {\n *   @withClassMethod(METHOD_NAMES)\n *   inst = new YourComponent();\n * }\n * ```\n */\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n","export const OBSERVERS_PATH = \"__observers__\";\nexport const COMPUTED_PATH = \"__computed__\";\nexport const CFCS_DETECTED_DEPENDENCIES_VERSION = 1;\nexport const CFCS_DETECTED_DEPENDENCIES = \"__CFCS_DETECTED_DEPENDENCIES__\";\n","import {\n  CFCS_DETECTED_DEPENDENCIES,\n  CFCS_DETECTED_DEPENDENCIES_VERSION,\n} from \"./const\";\nimport { Observer } from \"./Observer\";\n\nexport interface Detected {\n  host: Observer<any>;\n  observers: Array<Observer<any>>;\n  push(observer: Observer<any>): void;\n}\n\nexport function getDetectedStack(): Array<Detected> {\n  // Version issues do not occur when you access the native object in the global.\n  (Object as any)[CFCS_DETECTED_DEPENDENCIES] = (Object as any)[CFCS_DETECTED_DEPENDENCIES] || {};\n  const versionList = (Object as any)[CFCS_DETECTED_DEPENDENCIES];\n\n  versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] = versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] || [];\n\n  return versionList[CFCS_DETECTED_DEPENDENCIES_VERSION];\n}\n\nexport function getCurrentDetected(): Detected | undefined {\n  const stack = getDetectedStack();\n\n  return stack[stack.length - 1];\n}\n\nexport function detectDependencies(host: Observer<any>) {\n  const stack = getDetectedStack();\n  const observers: Array<Observer> = [];\n  const detected: Detected = {\n    host,\n    observers,\n    push(observer: Observer<any>) {\n      if (host !== observer && observers.indexOf(observer) === -1) {\n        observers.push(observer);\n      }\n    },\n  };\n\n  stack.push(detected);\n  return detected;\n}\n\nexport function endDetectDependencies() {\n  const stack = getDetectedStack();\n\n  return stack.pop();\n}\n","import Component from \"@egjs/component\";\nimport { getCurrentDetected } from \"./detectDependencies\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value, prevValue: Value) => void;\n}\n\n/**\n * Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @see observe\n */\nexport class Observer<Value = any> {\n  protected _current: Value;\n  protected _emitter = new Component<EmitterEvents<Value>>();\n  /**\n   *\n   */\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  /**\n   * return the current value.\n   */\n  public get current(): Value {\n    const currentDetected = getCurrentDetected();\n\n    currentDetected?.push(this);\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    this._setCurrent(value);\n  }\n  /**\n   * When the current value changes, the callback function is called.\n   */\n  public subscribe(callback: (value: Value, prevValue: Value) => void) {\n    this.current;\n    this._emitter.on(\"update\", callback);\n    return this;\n  }\n  /**\n   * Cancel the registered subscription through callback.\n   */\n  public unsubscribe(callback?: (value: Value, prevValue: Value) => void) {\n    this._emitter.off(\"update\", callback);\n    return this;\n  }\n  protected _setCurrent(value: Value) {\n    const prevValue = this._current;\n    const isUpdate = value !== prevValue;\n\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value, prevValue);\n    }\n  }\n  /**\n   * @hidden\n   */\n  public toString() {\n    return `${this.current}`;\n  }\n  /**\n   * @hidden\n   */\n  public valueOf() {\n    return this.current;\n  }\n}\n","import { detectDependencies, endDetectDependencies } from \"./detectDependencies\";\nimport { Observer } from \"./Observer\";\n\n/**\n * @category Reactive\n * @hidden\n */\nexport class ComputedObserver<T> extends Observer<T> {\n  private _registered: Array<Observer<any>> = [];\n  /**\n   * @description Creates a new computed observer from the values of other observers.\n   * It is read-only and if you change the value of the observer used inside the callback, its value will be automatically updated.\n   * @param _computedCallback A function for observers to be computed.\n   */\n  constructor(private _computedCallback: () => T) {\n    super();\n\n    this._current = this.current;\n  }\n\n  get current() {\n    detectDependencies(this);\n    const value = this._computedCallback();\n    const results = endDetectDependencies()!;\n\n    this._registered.forEach(observer => {\n      observer.unsubscribe(this._onCheckUpdate);\n    });\n    results.observers.forEach(observer => {\n      observer.subscribe(this._onCheckUpdate);\n    });\n    this._registered = results.observers;\n\n    return value;\n  }\n\n  private _onCheckUpdate = () => {\n    this._setCurrent(this.current);\n  }\n}\n","import { getObserver } from \"../utils\";\n\n\nfunction injectObserve(prototype: any, memberName: string, publicName = memberName) {\n  const nextAttributes: PropertyDescriptor = {\n    configurable: true,\n    get: function () {\n      return getObserver(this, publicName).current;\n    },\n    set: function (value: any) {\n      getObserver(this, publicName, value).current = value;\n    },\n  };\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  if (publicName !== memberName) {\n    Object.defineProperty(prototype, publicName, {\n      configurable: true,\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n    });\n  }\n}\n\nexport function Observe(protoype: any, memberName: string): void;\nexport function Observe(name?: string): (protoype: any, memberName: string) => void;\n/**\n * @description `Observe` is a property decorator and converts the property into a `reactive state`. You can detect its status through `.subscribe`.\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n* ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  // The public name and state name are the same.\n  @Observe value1 = 1;\n  // If you want to set public name and private properties separately\n  @Observe(\"value2\") _value2 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\ninterface C\n```\n */\nexport function Observe(...args: any[]) {\n  if (args.length > 1) {\n    return injectObserve(args[0], args[1]);\n  }\n\n  return (prototype: any, memberName: string) => injectObserve(prototype, memberName, args[0]);\n}\n\n\nexport function Reactive(protoype: any, memberName: string): void;\nexport function Reactive(name?: string): (protoype: any, memberName: string) => void;\n/**\n * @hidden\n */\nexport function Reactive(...args: any[]) {\n  return Observe(...args);\n}\n\n","import { keys } from \"../../core\";\nimport { getObserver, getObservers } from \"../utils\";\n\n/**\n * @hidden\n */\nexport function injectReactiveSubscribe(object: Record<string, any>,) {\n  object[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n    this[name];\n    getObserver(this, name).subscribe(callback);\n  };\n  object[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n    if (!name) {\n      keys(getObservers(this)).forEach((observerName) => {\n        this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\n\n/**\n * @description `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive-Decorator\n * @see Observe\n * @example\n * ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  @Observe value1 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\n\ninterface Component extends ReactiveSubscribe<{\n  value1: number;\n  value2: number;\n}> {}\n\nconst component = new Component();\n\n// 1\nconsole.log(component.value1);\n\ncomponent.subscribe(\"value1\", nextValue => {\n  // When the change event occurs => (2, 2)\n  console.log(nextValue, component.value2);\n});\n```\n */\nexport function ReactiveSubscribe(Constructor: any) {\n  const prototype = Constructor.prototype;\n\n  injectReactiveSubscribe(prototype);\n}\n\n/**\n * `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive\n */\nexport interface ReactiveSubscribe<State extends Record<string, any>> {\n  /**\n   * When the value of the property changes, the callback function is called.\n   */\n  subscribe<Name extends keyof State = keyof State>(\n    name: Name, callback: (value: State[Name]) => void): void;\n  /**\n   * Unregister the callback function corresponding to the property.\n   */\n  unsubscribe<Name extends keyof State = keyof State>(\n    name?: Name, callback?: (value: State[Name]) => void): void;\n}\n","import { ComputedObserver } from \"./ComputedObserver\";\nimport { Observer } from \"./Observer\";\nimport { ExtractNever, isFunction, keys } from \"../core\";\nimport { Observe } from \"./decorators/Observe\";\nimport { injectReactiveSubscribe, ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\nimport { defineObservers, isObserver, setObserver } from \"./utils\";\n\n\ntype ConvertValue<Object extends Record<string, any>> = {\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : Object[Key];\n}\n\ntype PickObverser<Object extends Record<string, any>> = ExtractNever<{\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : never;\n}>;\n\n/**\n * @typedef\n * @category Reactive\n */\nexport type ParitalReactiveObject<Object extends Record<string, any>>\n  = ConvertValue<Object> & ReactiveSubscribe<PickObverser<Object>>;\n\n\n/**\n * Result type of `reactive` function call\n * @category Reactive\n * @see reactive\n * @example\n *  ```js\n * import { reactive } from \"@cfcs/core\";\n *\n * // define reactive state\n * const obj = reactive({\n *   value1: 1,\n *   value2: 2,\n * });\n * ```\n */\nexport type ReactiveObject<Object extends Record<string, any>>\n= Object & ReactiveSubscribe<Object>;\n\nfunction makeReactiveObject<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n  all?: boolean,\n): ParitalReactiveObject<Object> {\n  const result = isFunction(setup) ? setup() : setup;\n  const reactiveObject: Record<string, any> = {};\n\n  defineObservers(reactiveObject);\n  keys(result).forEach((name: any) => {\n    const value = result[name];\n\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n    } else {\n      setObserver(reactiveObject, name, observe(value));\n    }\n    Observe(name)(reactiveObject, name);\n  });\n\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject as ParitalReactiveObject<Object>;\n}\n\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Makes all values into reactive objects.\n * @example\n * ```ts\n * import { reactive } from \"@cfcs/core\";\n *\n * const obj = reactive({\n *  value1: 1,\n *  value2: 2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * obj.value1 = 2;\n * ```\n */\nexport function reactive<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n): ReactiveObject<Object> {\n  return makeReactiveObject(setup, true) as ReactiveObject<Object>;\n}\n\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Only the values to which observer is applied are objects to which reactive is applied.\n * @example\n * ```ts\n * import { partialReactive, observe } from \"@cfcs/core\";\n *\n * const value1 = observe(1);\n * const value2 = observe(2);\n * const obj = partialReactive({\n *  value1,\n *  value2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * value1.current = 2;\n * ```\n */\nexport function partialReactive<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n): ParitalReactiveObject<Object> {\n  return makeReactiveObject(setup);\n}\n\n/**\n * @description Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @example\n * ```ts\n * import { observe } from \"@cfcs/core\";\n *\n * const ob1 = observe(1);\n *\n * ob1.subscribe(nextValue => {\n *   console.log(nextValue);\n * });\n *\n * ob1.current = 2;\n * ```\n */\nexport function observe<Type>(defaultValue?: Type): Observer<Type> {\n  return new Observer<Type>(defaultValue);\n}\n\n/**\n * @hidden\n */\nexport function computed<Type>(computedCallback: () => Type) {\n  return new ComputedObserver(computedCallback);\n}\n","import { COMPUTED_PATH, OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { ReactiveMethods } from \"./types\";\nimport { isObject, Ref } from \"../core\";\nimport { observe } from \"./inline\";\nimport { ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\n\n/**\n * @hidden\n */\nexport function withReactiveMethods<\n  Instance,\n  Names extends keyof Partial<Instance>,\n  Return extends ReactiveMethods<Instance, Names>\n>(ref: Ref<Instance>, methods?: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  if (!methods) {\n    return obj;\n  }\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n/**\n * @hidden\n */\nexport function defineObservers(instance: any) {\n  const observers: Record<string, Observer<any>> = {};\n\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get() {\n      return observers;\n    },\n  });\n\n  return observers;\n}\n\n/**\n * @hidden\n */\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n  const observers = instance[OBSERVERS_PATH];\n  const computedList = instance?.constructor?.prototype?.[COMPUTED_PATH];\n\n  if (computedList) {\n    computedList.forEach(name => {\n      if (!(name in observers) && name in instance) {\n        instance[name];\n      }\n    });\n  }\n  return observers;\n}\n\n/**\n * @hidden\n */\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n\n/**\n * @hidden\n */\nexport function setObserver(instance: any, name: string, observer: Observer<any>) {\n  const observers = getObservers(instance);\n\n  observers[name] = observer;\n}\n\n/**\n * @description Whether that object is an observer instance\n * @category Reactive\n */\nexport function isObserver(val: any): val is Observer {\n  return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n\n/**\n * @description Whether the object is reactive\n * @category Reactive\n */\nexport function isReactive(val: any): val is ReactiveSubscribe<any> {\n  return val && !isObserver(val) && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n","import { isFunction, keys } from \"../core\";\nimport { Ref } from \"../core/types\";\nimport { ReactiveAdapter, ReactiveAdapterParam } from \"./ReactiveAdapter\";\nimport { ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\nimport { ReactiveEventCallback, ReactiveState } from \"./types\";\nimport { getObservers, withReactiveMethods } from \"./utils\";\nimport Component from \"@egjs/component\";\nimport { EventKey, EventTriggerParams } from \"@egjs/component/declaration/types\";\n\n/**\n * @category Reactive\n * @hidden\n */\nexport function adaptReactive<\n  Instance extends ReactiveSubscribe<Record<string, any>>,\n  State extends Record<string, any> = ReactiveState<Instance>,\n  Methods extends keyof Partial<Instance> = never,\n  Props = any,\n  Events extends Record<string, any> = {},\n>(adapter: ReactiveAdapterParam<Instance, State, Methods, Props, Events>, props?: () => Props) {\n  const objectAdapter: ReactiveAdapter<Instance, State, Methods, Props, Events> = isFunction(adapter) ? {\n    setup: adapter,\n  } : adapter;\n\n  function getProps(): Props {\n    return props?.() ?? objectAdapter.props?.() ?? objectAdapter.data?.() ?? {} as Props;\n  }\n\n  const eventEmitter = new Component<Events>();\n  const mountedHooks: Array<(props: Props, instance?: Instance | null) => Instance | void> = [];\n  const initHooks: Array<(instance: Instance, props: Props) => void> = [];\n  const destroyHooks: Array<(instance: Instance, props: Props) => void> = [];\n  const onHooks: Array<<EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void | (() => void)> = [];\n  const instanceRef: Ref<Instance> = { current: null };\n  let offHooksList: Array<Array<() => void>> = [];\n  let initialState: State | null = null;\n  let eventNames: readonly (keyof Events)[] = [];\n  let methodNames: readonly Methods[] = [];\n\n\n  const onMounted = (callback: (props: Props, instance?: Instance | null) => Instance | void) => {\n    mountedHooks.push(callback);\n  };\n  const onInit = (callback: (instance: Instance, props: Props) => void) => {\n    initHooks.push(callback);\n  };\n  const onDestroy = (callback: (instance: Instance, props: Props) => void): void => {\n    destroyHooks.push(callback)\n  };\n  const on = (callback: <EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void | (() => void)) => {\n    onHooks.push(callback);\n  };\n  const emit = <EventName extends EventKey<Events>>(eventName: EventName, ...params: EventTriggerParams<Events, EventName>) => {\n    eventEmitter.trigger(eventName, ...params);\n  };\n\n  const setInitialState = (state: State) => {\n    initialState = state;\n  };\n  const setEvents = (events: readonly (keyof Events)[]) => {\n    eventNames = events;\n  }\n  const setMethods = (methods: readonly Methods[]) => {\n    methodNames = methods;\n  }\n\n  if (objectAdapter.setup) {\n    instanceRef.current = objectAdapter.setup({\n      getProps,\n      setInitialState,\n      setEvents,\n      setMethods,\n      onMounted,\n      onDestroy,\n      onInit,\n      emit,\n      on,\n    }) || null;\n  }\n\n  if (objectAdapter.created) {\n    instanceRef.current = objectAdapter.created(getProps()) || null;\n  }\n\n  if (objectAdapter.events) {\n    setEvents(objectAdapter.events);\n  }\n  if (objectAdapter.state) {\n    setInitialState(objectAdapter.state);\n  }\n  if (objectAdapter.methods) {\n    setMethods(objectAdapter.methods);\n  }\n  if (objectAdapter.mounted) {\n    onMounted(objectAdapter.mounted);\n  }\n  if (objectAdapter.destroy) {\n    destroyHooks.push(objectAdapter.destroy);\n  }\n  if (objectAdapter.init) {\n    initHooks.push(objectAdapter.init);\n  }\n  if (objectAdapter.on) {\n    onHooks.push((instance, eventName, listener) => {\n      const off = objectAdapter.on!(instance, eventName, listener);\n\n      return () => {\n        off && off();\n        objectAdapter.off?.(instance, eventName, listener);\n      };\n    });\n  }\n\n  return {\n    events: () => eventNames,\n    state(): State {\n      const inst = instanceRef.current;\n\n      if (initialState) {\n        return initialState;\n      }\n      if (inst) {\n        const observers = getObservers(inst);\n\n        setInitialState(keys(observers).reduce((prev, cur) => {\n          prev[cur] = observers[cur].current;\n          return prev;\n        }, {} as any));\n      }\n      return initialState || {} as State;\n    },\n    instance() {\n      return instanceRef.current;\n    },\n    mounted(): void {\n      const props = getProps();\n\n      mountedHooks.forEach(hook => {\n        instanceRef.current = hook(props, instanceRef.current) || instanceRef.current;\n      });\n\n    },\n    init(): void {\n      // on events\n      const instance = instanceRef.current!;\n      const props = getProps();\n\n      offHooksList = (eventNames as string[]).map(eventName => {\n        const listener = (...params: any[]) => {\n          (eventEmitter as any).trigger(eventName, ...params);\n        };\n\n        const instance = instanceRef.current!;\n\n        return onHooks.map(hook => hook(instance, eventName, listener as any)).filter(Boolean) as Array<() => void>;\n      });\n\n      // init\n      initHooks.forEach(hook => {\n        hook(instance, props);\n      });\n    },\n    destroy(): void {\n      // off events\n      offHooksList.forEach(offHooks => {\n        offHooks.forEach(hook => {\n          hook();\n        });\n      });\n\n      // destroy\n      eventEmitter.off();\n      const instance = instanceRef.current!;\n      const props = getProps();\n\n      destroyHooks.forEach(hook => {\n        hook(instance, props);\n      });\n    },\n    methods() {\n      return withReactiveMethods<any, any, any>(instanceRef, methodNames);\n    },\n    on(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      eventEmitter.on(eventName, listener);\n    },\n    off(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      eventEmitter.off(eventName, listener);\n    },\n  };\n}\n","import { COMPUTED_PATH } from \"../const\";\nimport { computed } from \"../inline\";\nimport { getObserver, getObservers } from \"../utils\";\n\n\n/**\n * @description `Computed` is a property decorator.\n * Changes in computed state values are also recognized according to changes in observers used within the getter function.\n * You can detect its status through `.subscribe`.\n * @hidden\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n * ```ts\nconst ob1 = observe(0);\nconst ob2 = observe(1);\n\n// When\n@ReactiveSubscribe\nclass TestComputed {\n    @Computed\n    get ob3() {\n        return ob1.current + ob2.current;\n    }\n}\nconst inst = new TestComputed();\n\ninst.subscribe(\"ob3\", ob3 => {\n  console.log(ob3);\n});\n\nob1.current = 1;\n```\n */\nexport function Computed(prototype: any, memberName: string, attributes: PropertyDescriptor): PropertyDescriptor {\n  const get = attributes.get!;\n  function getComputed() {\n    const observers = getObservers(this);\n\n    if (!(memberName in observers)) {\n      observers[memberName] = computed(get.bind(this));\n    }\n    return getObserver(this, memberName).current;\n  }\n  const nextAttributes: PropertyDescriptor = {\n    configurable: true,\n    get: getComputed,\n  }\n\n  if (COMPUTED_PATH in prototype) {\n    prototype[COMPUTED_PATH] ||= [];\n    const computedList = prototype[COMPUTED_PATH];\n\n    if (computedList.indexOf(memberName) === -1) {\n      computedList.push(memberName);\n    }\n  }\n  Object.defineProperty(prototype, memberName, nextAttributes);\n\n  return nextAttributes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}