{"ast":null,"code":"/*\nCopyright (c) NAVER Corp.\nname: @egjs/component\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-component\nversion: 3.0.5\n*/\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nvar isUndefined = function (value) {\n  return typeof value === \"undefined\";\n};\n\n// This class name is not matched to file name intentionally\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */\nvar ComponentEvent = /*#__PURE__*/function () {\n  /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */\n  function ComponentEvent(eventType, props) {\n    var e_1, _a;\n    this._canceled = false;\n    if (props) {\n      try {\n        for (var _b = __values(Object.keys(props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this[key] = props[key];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    this.eventType = eventType;\n  }\n  /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */\n  var __proto = ComponentEvent.prototype;\n  __proto.stop = function () {\n    this._canceled = true;\n  };\n  /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */\n  __proto.isCanceled = function () {\n    return this._canceled;\n  };\n  return ComponentEvent;\n}();\n\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */\n  function Component() {\n    this._eventHandler = {};\n  }\n  /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */\n  var __proto = Component.prototype;\n  __proto.trigger = function (event) {\n    var params = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      params[_i - 1] = arguments[_i];\n    }\n    var eventName = event instanceof ComponentEvent ? event.eventType : event;\n    var handlers = __spread(this._eventHandler[eventName] || []);\n    if (handlers.length <= 0) {\n      return this;\n    }\n    if (event instanceof ComponentEvent) {\n      event.currentTarget = this;\n      handlers.forEach(function (handler) {\n        handler(event);\n      });\n    } else {\n      handlers.forEach(function (handler) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handler.apply(void 0, __spread(params));\n      });\n    }\n    return this;\n  };\n  /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */\n  __proto.once = function (eventName, handlerToAttach) {\n    var _this = this;\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      var eventHash = eventName;\n      for (var key in eventHash) {\n        this.once(key, eventHash[key]);\n      }\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      var listener_1 = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handlerToAttach.apply(void 0, __spread(args));\n        _this.off(eventName, listener_1);\n      };\n      this.on(eventName, listener_1);\n    }\n    return this;\n  };\n  /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */\n  __proto.hasOn = function (eventName) {\n    return !!this._eventHandler[eventName];\n  };\n  /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */\n  __proto.on = function (eventName, handlerToAttach) {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      var eventHash = eventName;\n      for (var name in eventHash) {\n        this.on(name, eventHash[name]);\n      }\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      var handlerList = this._eventHandler[eventName];\n      if (isUndefined(handlerList)) {\n        this._eventHandler[eventName] = [];\n        handlerList = this._eventHandler[eventName];\n      }\n      handlerList.push(handlerToAttach);\n    }\n    return this;\n  };\n  /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */\n  __proto.off = function (eventName, handlerToDetach) {\n    // Detach all event handlers.\n    if (isUndefined(eventName)) {\n      this._eventHandler = {};\n      return this;\n    }\n    // Detach all handlers for eventname or detach event handlers by object.\n    if (isUndefined(handlerToDetach)) {\n      if (typeof eventName === \"string\") {\n        delete this._eventHandler[eventName];\n        return this;\n      } else {\n        var eventHash = eventName;\n        for (var name in eventHash) {\n          this.off(name, eventHash[name]);\n        }\n        return this;\n      }\n    }\n    // Detach single event handler\n    var handlerList = this._eventHandler[eventName];\n    if (handlerList) {\n      var length = handlerList.length;\n      for (var i = 0; i < length; ++i) {\n        if (handlerList[i] === handlerToDetach) {\n          handlerList.splice(i, 1);\n          if (length <= 1) {\n            delete this._eventHandler[eventName];\n          }\n          break;\n        }\n      }\n    }\n    return this;\n  };\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */\n  Component.VERSION = \"3.0.5\";\n  return Component;\n}();\n\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-assignment\nvar ComponentEvent$1 = ComponentEvent;\n\n/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nexport default Component;\nexport { ComponentEvent$1 as ComponentEvent };","map":{"version":3,"names":["isUndefined","value","ComponentEvent","eventType","props","_canceled","_b","__values","Object","keys","_c","next","done","key","__proto","prototype","stop","isCanceled","Component","_eventHandler","trigger","event","params","_i","arguments","length","eventName","handlers","__spread","currentTarget","forEach","handler","apply","once","handlerToAttach","_this","eventHash","listener_1","args","off","on","hasOn","name","handlerList","push","handlerToDetach","i","splice","VERSION","ComponentEvent$1"],"sources":["/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/component/src/utils.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/component/src/ActualComponentEvent.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/component/src/Component.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/component/src/ComponentEvent.ts","/home/diegopez/sweetberryWebPage/website/node_modules/@egjs/component/src/index.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const isUndefined = (value: any): value is undefined => typeof value === \"undefined\";\n","import { DefaultProps } from \"./types\";\n\n// This class name is not matched to file name intentionally\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */\nclass ComponentEvent<PROPS extends Record<string, any>, TYPE extends string = string, THIS = any> implements DefaultProps<TYPE, THIS> {\n  /**\n   * A Component instance that triggered event.\n   * @type Component\n   * @ko 이벤트를 트리거한 Component 인스턴스.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent<{ foo: number; bar: string }>\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.currentTarget; // ExtendedClass\n   * });\n   * ```\n   */\n  public currentTarget: THIS;\n\n  /**\n   * The name of the event.\n   * @type string\n   * @ko 이벤트 이름.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.eventType; // \"someEvent\"\n   * });\n   * ```\n   */\n  public eventType: TYPE;\n\n  private _canceled: boolean;\n\n  /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */\n  public constructor(\n    eventType: TYPE,\n    props: PROPS\n  ) {\n    this._canceled = false;\n\n    if (props) {\n      for (const key of Object.keys(props as Record<string, any>)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this[key] = props[key];\n      }\n    }\n\n    this.eventType = eventType;\n  }\n\n  /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */\n  public stop() {\n    this._canceled = true;\n  }\n\n  /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */\n  public isCanceled() {\n    return this._canceled;\n  }\n}\n\nexport default ComponentEvent;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { isUndefined } from \"./utils\";\nimport { EventCallback, EventHash, EventKey, EventMap, EventTriggerParams } from \"./types\";\nimport ComponentEvent from \"./ComponentEvent\";\nimport ActualComponentEvent from \"./ActualComponentEvent\";\n\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */\nclass Component<T extends EventMap> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n\n  private _eventHandler: { [keys: string]: Array<(...args: any[]) => any> };\n\n  /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */\n  public constructor() {\n    this._eventHandler = {};\n  }\n\n  public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this;\n  public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this;\n  /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */\n  public trigger<K extends EventKey<T>>(event: K | ComponentEvent<T[K], K, this>, ...params: EventTriggerParams<T, K> | void[]): this {\n    const eventName = (event as any) instanceof ActualComponentEvent\n      ? (event as ActualComponentEvent<T[K]>).eventType\n      : event as K;\n\n    const handlers = [...(this._eventHandler[eventName] || [])];\n\n    if (handlers.length <= 0) {\n      return this;\n    }\n\n    if ((event as any) instanceof ActualComponentEvent) {\n      (event as ActualComponentEvent<T[K]>).currentTarget = this;\n\n      handlers.forEach((handler: (event: ComponentEvent<T[K], K, this>) => any) => {\n        handler(event as ComponentEvent<T[K], K, this>);\n      });\n    } else {\n      handlers.forEach(handler => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handler(...params);\n      });\n    }\n\n    return this;\n  }\n\n  public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public once(eventHash: EventHash<T, this>): this;\n  /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */\n  public once<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const key in eventHash) {\n        this.once((key as K), eventHash[key] as EventCallback<T, K, this>);\n      }\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      const listener: any = (...args: any[]) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handlerToAttach(...args);\n        this.off(eventName, listener);\n      };\n\n      this.on(eventName, listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */\n  public hasOn<K extends EventKey<T>>(eventName: K): boolean {\n    return !!this._eventHandler[eventName];\n  }\n\n  public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public on(eventHash: EventHash<T, this>): this;\n  /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */\n  public on<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const name in eventHash) {\n        this.on(name, eventHash[name] as any);\n      }\n\n      return this;\n    } else if (typeof eventName === \"string\" &&\n      typeof handlerToAttach === \"function\") {\n      let handlerList = this._eventHandler[eventName];\n\n      if (isUndefined(handlerList)) {\n        this._eventHandler[eventName] = [];\n        handlerList = this._eventHandler[eventName];\n      }\n\n      handlerList.push(handlerToAttach as EventCallback<T, EventKey<T>, this>);\n    }\n\n    return this;\n  }\n\n  public off(eventHash?: EventHash<T, this>): this;\n  public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this;\n  /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */\n  public off<K extends EventKey<T>>(eventName?: K | EventHash<T, this>, handlerToDetach?: EventCallback<T, K, this>): this {\n    // Detach all event handlers.\n    if (isUndefined(eventName)) {\n      this._eventHandler = {};\n      return this;\n    }\n\n    // Detach all handlers for eventname or detach event handlers by object.\n    if (isUndefined(handlerToDetach)) {\n      if (typeof eventName === \"string\") {\n        delete this._eventHandler[eventName];\n        return this;\n      } else {\n        const eventHash = eventName;\n\n        for (const name in eventHash) {\n          this.off(name, eventHash[name] as any);\n        }\n        return this;\n      }\n    }\n\n    // Detach single event handler\n    const handlerList = this._eventHandler[eventName as K];\n\n    if (handlerList) {\n      const length = handlerList.length;\n\n      for (let i = 0; i < length; ++i) {\n        if (handlerList[i] === handlerToDetach) {\n          handlerList.splice(i, 1);\n\n          if (length <= 1) {\n            delete this._eventHandler[eventName as K];\n          }\n\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n\nexport default Component;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ActualComponentEvent from \"./ActualComponentEvent\";\nimport { ComponentEventConstructor, DefaultProps } from \"./types\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-assignment\nconst ComponentEvent = ActualComponentEvent as ComponentEventConstructor;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ComponentEvent<PROPS = {}, TYPE extends string = string, THIS = any> = DefaultProps<TYPE, THIS> & PROPS;\n\nexport default ComponentEvent;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"./Component\";\nimport ComponentEvent from \"./ComponentEvent\";\n\nexport { ComponentEvent };\nexport default Component;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}